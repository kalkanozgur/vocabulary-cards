// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // If you use Prisma Migrate, specify a URL for the Prisma shadow database
  // https://neon.tech/docs/guides/prisma/#configure-a-shadow-database-for-prisma-migrate
  // shadowDatabaseUrl = env("DATABASE_URL")
}

// Models for Word Dictionary
model Word {
  id          String       @id @default(cuid())
  word        String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String
  level       Int
  meanings    Meaning[]
  definitions Definition[]
  tags        Tag[]
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Tag {
  id        String   @id @default(cuid())
  tag       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  words     Word[]
}

model Definition {
  id        String    @id @default(cuid())
  def       String
  type      String
  userId    String
  wordId    String
  word      Word      @relation(fields: [wordId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  examples  Example[]
}

model Example {
  id        String     @id @default(cuid())
  example   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  defId     String
  def       Definition @relation(fields: [defId], references: [id], onDelete: Cascade)
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Meaning {
  id        String   @id @default(cuid())
  meaning   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  wordId    String
  userId    String
  word      Word     @relation(fields: [wordId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  words         Word[]
  meanings      Meaning[]
  examples      Example[]
  definitions   Definition[]
  tags          Tag[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
